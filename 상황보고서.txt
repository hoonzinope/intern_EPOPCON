각 단계별 상황, 문제점, 예시






1.브랜드 리스트 생성

1-1. 지점 리스트 생성 ->
 
상황)
company table .co_name 을 이용 모든 co_name을 띄어쓰기 단위 조각 낸뒤
나온 단어수 count =>brand table 생성
brand table에서 '~점'으로 끝나는 모든 단어 가져온다.
 
why? 지점 리스트 생성하기 위해
지점 리스트는 왜 생성? => 지점을 보유한 상점을 브랜드라고 가정하기 때문에

문제점) 점으로 끝나는 모든 단어 이기 때문에 백화점, 정육점, 전문점, 홍콩반점 등등
지점명이 아닌 점을 가져오게 됩니다.

sol) 직접 제거합니다.
한계) 직접 제거하기 위해 많은양의 지점리스트를 눈으로 확인 후 제거 해야 합니다.







1-2. 브랜드 후보 생성

상황) 위 단계에서 만들어진 지점명 리스트를 가지고, company table의 co_name_r을 이용

why  co_name_r ? 띄어쓰기가 되어있지 않기 때문에

왜 띄어쓰기가 되어 있으면 안되는가? 띄어쓰기가 되어있는 경우 예를들어
CU 경인 교대점 와 CU 교대점의 경우 교대점이라는 공통 지점명이 존재 하기 때문에
각각 CU 경인, CU 이라는 브랜드 후보를 생성합니다.
만약 띄어쓰기가 안되있는 co_name_r을 사용할 경우 경인교대점과 교대점이 하나의 CU로 묶이기 때문에
CO_NAME_R을 사용합니다.
이렇게 {브랜드명 : 브랜드 지점 리스트} 형식의 사전을 구성합니다.

문제점)
1.지점명이 명시가 안되어 있는 co_name_r의 경우 
ex) CU 라고만 되어 있는  co_name_r의 경우
명시가 되어있지 않기 때문에  찾아낼 수 없습니다.

2.지점명이 지점명 리스트에 없는 경우 역시 찾아낼수 없습니다.







1-3. 브랜드 후보 별 req_co_name 문서 생성
생성이유? => 가령 CU  와 씨유 라는 각각의 브랜드로 묶였을시 req_mapp table 의 req_co_name이라는 문자정보를 통해
서로 같은  브랜드 라는 걸 밝히기 위해

문자정보를 통해 어떻게 밝힐 것인가? => 같은 브랜드의 경우 문자정보를 통해 들어오는 상점명이 매우 유사 할 것이다라는 가정을 합니다.

위의 가정과 윗단계에서 생선된 브랜드 사전을 통해 CU에 묶여있는 상점들의 req_co_name을 문서로, 씨유에 묶여있는 상점들의 req_co_name을 문서로
생성 합니다.

문제점)

p1. 브랜드 별로 묶여 있는 상점의 수가 다르고, 유명 프랜차이즈의 경우 많은 수의 상점으로 묶여있습니다. 이때 각 상점의 co_id를 이용해 req_map
table에서 req_co_name을 가져옵니다. 이 query가 굉장히 느려서 현재 시험해보고 있는 sampling case(브랜드 100개)의 연산도 약 한시간 가량이
소모 되었습니다. (1000개 연산시 1day 13시간 51분 소요)







1-4. req_name문서를 이용한 브랜드간 유사도 계산

상황)
위 단계에서 생성한 각 브랜드면 req_name문서를 통해 n 차원 vector를 만든다.
how? => 각 문서내 req_name을 카운트 하여 word별 count value를 vector로 만들어줍니다.
만든 vector끼리 코사인유사도를 통해 두 문서간 유사도를 비교합니다. 





1-5 유사도 행렬을 통한 브랜드 통합
유사도가 높게 나오는 브랜드 ex) BBQ, BBQ숯불바베큐치킨 들은 하나의 대표 브랜드로 통합합니다.
문제점)
false postive와 false negative의 문제점 발생

false positive란 유사도 값이 일정 기준치 이상 넘을시 유사하다 판단하여 묶이는데
이 기준치가 낮아서 묶이지 말아야할 브랜드끼리 묶이는 경우 발생 ex)가르텐비어, 코코호두과자

false negative-> 위 상황이 발생하였기에 기준치를 높혔는데, 같은 브랜드 임에도 req_name 문서가 서로 유사하지 않아
매칭이 안되는 경우가 발생


sol) 유사도가 높게 나오는 이유가 되는 특정문자들(ex. 주식회사, 주, 더, ' ','',지점명 등등)을 제거 한뒤 유사도 계산 필요
한계) false 값을 발견한뒤 높게 나오는 이유가 되는 문자를 확인후 수동으로 제거 해야합니다.







2.브랜드-상점 매핑

2-1.브랜드별 company table의 실제 상점을 매핑
상황)
1-4 단계에서 생성된 {브랜드 : 브랜드 지점 리스트(co_name)} 를 통해 
브랜드와 브랜드 별로 묶인 상점들을 {브랜드 : 브랜드 지점(company_id)} 사전으로 묶습니다.
이후 브랜드 별 실제 상점을 MEUMS_COMPANY table에서 찾을때 사전의 value 값인 (company_id)를 통해
검색을 합니다.

문제점)
위 1-2 단계에서 찾지 못한 상점들(ex, CU)을 묶이지 않습니다.





2-2. dashboard 로 띄우기
위 2-1단계에서 만들어진 사전을 pandas dataFrame으로 생성및 pickle파일로 변환뒤
dashborad 에 띄워줍니다. dashboard -> 조이사님이 만드신 inspection01.py 파일


inspection파일의 목적 -> 카테고리가 잘못 매핑된 상점들을 자동 혹은 수동으로 수정할수 있게 해주는
dashboard 생성

inspection 파일의 기능 -> 해당 브랜드 선택시 category histogram이 count 순으로 나옵니다.(내림차순)
잘못 매핑된 카테고리의 경우 확인 가능합니다.

문제점)
1단계에서 잘못 매핑된 브랜드 사전이 올경우 dasboard 역시 잘못된 결과를 보이게 됩니다.





3. 잘못 매핑된 카테고리 수정





